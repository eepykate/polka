#  ~/etc/sh/aliases

command -v shlib >/dev/null && . shlib

# file shortcuts

# pre-genned
#v=${XDG_CONFIG_HOME:=~/.config}/sh/sc.sh
#[ -e "$v" ] && . "$v"

# generate on startup: ~1.2ms slower than sourcing a pre-genned file
# (3.37ms vs 2.15ms when using zsh -c '. /path/to/thisfile',
# including file access time & other script overhead [https://git.io/timetest])
while read -r name lo; do
	[[ "$name" =~ [a-z].* ]] || continue
	[[ "$lo" =~ ~.* ]] && lo=${lo/\~/$HOME}
	[[ -d "$lo" ]] && eval "alias '$name=cd $lo'" \
		|| eval "alias '$name=v $lo'"
	eval "export '$name=$lo'"
done << SHORTCUTS
#  dirs
h       ~
gi      ~/src
dl      ~/tmp
dots    ~/opt/dots
bks     ~/opt/bks
db      ~/opt/bks

wp      ~/src/walls
fet     ~/src/fetsh
gg      ~/src/gkay

scrs    ~/opt/scr
pics    ~/opt/scr
recs    ~/opt/scr
gf      ~/tmp/cache/gkif
tu      ~/opt/turtles
em      /hd/discord/emotes

oth     /hd/linuxdistros
ot      /hd2/linuxdistros
dw      /hd/media/DoctorWho
tw      /hd/media/Torchwood
sp      ~/etc/startpage
fchr    ~/etc/firefox/main/chrome

#  files
# shells
sc      ~/etc/sh/sc
z       ~/etc/sh/.zshrc
zh      ~/etc/sh/zsh-history
a       ~/etc/sh/aliases
pro     ~/etc/sh/profile

# wm
com     ~/etc/picom.conf
bs      ~/etc/bspwm/bspwmrc
drc     ~/etc/dunst/dunstrc
sx      ~/etc/sxhkd/sxhkdrc
sb      ~/etc/sxhkd/bspwm
so      ~/etc/sxhkd/other

# X
xin     ~/etc/xorg/rc
xres    ~/etc/xorg/res
uc      ~/etc/firefox/main/chrome/userChrome.css
ucc     ~/etc/firefox/main/chrome/userContent.css

vimrc   ~/etc/nvim/init.vim
SHORTCUTS



for i in 0 1 2 3 4 5 6 7 8 9; do
	alias "${i}=exit"
done

grd() {
	export JAVA_HOME=/usr/lib/jvm/java-17-openjdk/
	time HOME=$HOME/opt/apps ./gradlew "-Duser.home=$HOME/opt/apps" "$@"
}

alias sy="systemctl --user"
alias ss="sudo systemctl"
alias sss="sudo systemctl status"

# package manager
# github.com/willeccles/cpm
alias \
	i="cpm i"  \
	r="cpm r"  \
	s="cpm s"  \
	in="cpm I" \
	up="time cpm U" \
	ni="nix-env -iA"

# git
alias \
	ga="git add"   \
	gd="git diff"  \
	gr="git reset" \
	gaa="git add -A" \
	gds="git diff --staged"

alias \
	gc="git commit"    \
	gcm="git commit -m" \
	gca="git commit --amend"

alias \
	gp="git push"  \
	gpf="git push -f"


# short and informative git log
alias gl="git log --all --decorate --oneline --graph"

# standard utils
alias ls="ls -h --group-directories-first --color=auto"
alias grep="grep --color=auto"

alias \
	rm="del"   \
	g="grep -i" \
	sr="sort -n" \
	ta="tail -n1" \
	he="head -n1" \
	s1="sleep 1" \
	s2="sleep 2" \
	s3="sleep 3" \
	s4="sleep 4" \
	lc="wc -l"

alias b='bg;disown'

tc() { tail -n1 "$@" | xclip -sel clip; }
hc() { head -n1 "$@" | xclip -sel clip; }
calc() { [[ "$*" =~ % ]] && s= || s='scale=5;'; echo "$s $*" | bc; }

pk() {
	arg=; for i; do
		[[ "$i" =~ ^- ]] && arg+=$i
		[[ "$i" =~ ^[0-9]*$ ]] && { kill $arg $i; continue; }
		pkill $arg $i
	done
}

fuck() {
	for i; do
		pkill -i -9 "$i" || ! echo "killing '$i' failed with exit code $?"
	done
}

# elapsed time
et() {
	pids=
	for i; do
		# pid then fallback to name
		[ "$i" -ge 1 ] 2>/dev/null && pids="$pids $i" ||
			pids="$pids $(pgrep -i -- "$i")"

		pids=${pids# }
	done

	[ "$pids" ] || ! echo "no such processes: $*" &&
		ps -o 'etime=,comm=' ${pids:-999999}
}

# "exec" and exit (for gui things)
ec() { "$@" &! exit; }

afi() {  # affinity
	pids=;cpus=$1;shift
	for i; do
		# pid then fallback to name
		[ "$i" -ge 1 ] 2>/dev/null && pids="$pids $i" ||
			pids="$pids $(pgrep -i "$i")"

		pids=${pids# }
	done

	[ "$pids" ] || ! echo "no such processes: $*" &&
		for i in $pids; do
			( sudo taskset -pac "$cpus"  "$i" & )
		done >/dev/null 2>&1
}

af() {  # after
	echo "$s" | grep -qx '[msh0-9.]\+' || s=1
	test -e "/proc/$1/status" && set -- test -e "/proc/$1/status"
	while "$@" >/dev/null; do sleep "$s"; done
}

wh() {  # when
	af pgrep -x "$1";  "$@"
}

np() {
	af pgrep -x "$1";  n "${2:-$1 done}" "$3"
}

#
#  files/dirs
#

alias qmv="EDITOR='nvim -c \"set tabstop=8 softtabstop=8 shiftwidth=8 noexpandtab\"' qmv --format=do"

# drag and drop
q() { dragon --and-exit "$@"; }

# copy image
alias ci="xclip -selection clipboard -t image/png"

# rough find
f() { find "${2:-.}" -iname "*$1*"; }
# exact find
F() { find "${2:-.}" -name "$1"; }

# backup
# apparently zstd decompresses fast
bk() {
	if [ $# = 1 ] && ! [ -d "$1" ]; then
		cp -- "$1" "$1_$(date +%s).backup"
	else
		tar -I zstd -cvf "${1%/}_$(date +%s).tzst.backup" "$@"
	fi
}

e() {
	test -e "$1" || return 1
	[[ "$1" =~ .*\.crdownload\|.*\.part ]] && s=1 af test -e "$1"
	a=${1%.crdownload} a=${a%.part}; shift
	case $(file -ib "$a") in
		*zstd*) tar -Izstd\ -T0 -xvf "$a";;
		*) atool -x "$a" "$@"
	esac
}
c() { tar -Izstd\ -T0 -cvf "${1##*/}.tar.zst" "$@"; }

d() {
	unset asda vid img act

	for arg; do
	# check if argument is an exact filename, or at the start/end/middle
	# of a filename, in that order
	for i in "$arg" "$arg"* *"$arg" *"$arg"*; do
		[[ -e "$i" ]] || continue

		case $(file -b --mime-type "$i") in
			# add to array then call the command as to use the native album
			# feature in mpv/feh instead of making multiple windows
			audio*|video*|image/gif*|*json) vid+=("$i");;
			image*)            img+=("$i");;

			text*)      cat "$i";;
			*)  break;;
		esac

		act=nonzero
		break
	done
	done

	[ "$img" ] && im "${img[@]}"
	[ "$vid" ] && mpv "${vid[@]}" --loop --force-window

	[ "$act" ] || return 1
}

v() {
	# edit file based on write perms
	if [[ "$1" =~ (^http|^-) ]] || [[ -w "$1" ]] || [[ -w "$(dirname "$1")" ]]; then
		$EDITOR "$@"
	else
		sudo -E $EDITOR "$@"
	fi

	# reset cursor
	#printf '\e[4 q'
}

#
#  media
#

# convert to gif
cgif() {
	eval "$(ffprobe -v quiet -show_streams "$1" | grep '^[wh]')"

	[ "$width" -gt "1000" ] &&
		echo "video width ($width) greater than 1000, shrinking" &&
		width=1000

	f="fps=15,scale=$width:-1:flags=lanczos"

	echo "Generating the palette"
	ffmpeg -i "$1" -vf "$f,palettegen" -y "/tmp/palette.png" -loglevel error

	echo "Generating the gif"
	ffmpeg -i "$1" -i "/tmp/palette.png" -lavfi "$f [x]; [x][1:v] paletteuse" \
		-y "${1%.*}.gif" -loglevel error
}

# lower res to 720p
c720() {
	ffmpeg -y -i "$1" \
		-b:v 4M -r 30 -c:v h264_nvenc -vf "scale=-1:720" \
	  "${1%.*}-720.mp4"
}

# combine images vertically
comb() {
	montage "$@" -geometry +0+0 -tile 1x output.png
}

is() {
	a=$1;[[ "$1" =~ http.* ]] && {
		set -- ~/tmp/a.svg
		curl -Ls "$a" -o "$1"
	}
	inkscape "$@" &!
}


#
#  other
#

alias vv=blank
blank() {
	# hide cursor
	printf '\e[?25l'
	clear

	# make the background black
	printf '%.s %b'  \
		st:      '\033]4;256;#000000\007' \
		urxvt:   '\033]11;#000000\007'    \
		^border: '\033]708;#000000\007'

	# making a c program on the fly :)
	command -v pause >/dev/null 2>&1 || {
		printf 'int main() { pause(); }' \
			| cc -xc -o "$HOME/bin/bin/pause" - >/dev/null 2>&1
		chmod +x "$HOME/bin/bin/pause"
	}
	pause
}

blocks() {
	for i in 4 10; do
		printf "\e[$i%sm   \e[m"  {0..7}
		echo
	done
}

notthing() {
	for i in critical normal low; do
		notify-send -t 40000 -u "$i"   "  $i  â€‹"
	done
}

ml() {  # mem limit
	mem=$(echo "$1" | tr 'gmkb' 'GMKB'); shift
	case $1 in
		c[0-9][0-9]*) cpu="-p CPUQuota=${1#?}%"; shift
	esac

	# put systemd-run under nopasswd and add this to sudoers to keep the env:
	# Defaults!/usr/bin/systemd-run !env_reset
	sudo systemd-run --uid="$(id -u)" --scope -p MemoryLimit="$mem" $cpu "$@"
}


mc() { # mouse move
	xdotool click ${1:-1}
}

mm() { # mouse move
	xdotool mousemove_relative -- $1 ${2:-0}
}

## window titles
# precmd() {
# 	printf "\e[4 q\033k %s \033\\" "${PWD//$HOME/~}"
# }
# preexec() {
# 	a="${3//$HOME/~}"
# 	printf "\033k %s \033\\" "${a//\"}"
# }

# vim: ft=sh
