#!/bin/sh
#
# amixer/playerctl wrapper script for volume/media
#
# source:
#   https://github.com/6gk
#
# shellcheck disable=SC2015
# shellcheck disable=SC2086

# use gdbus to replace notifications
# notify <id of notif> <header> <body>
# body is optional

notify() {
	gdbus call -e -d "org.freedesktop.Notifications" \
		-o /org/freedesktop/Notifications \
		-m org.freedesktop.Notifications.Notify "" \
		"$1" "" "$2" "$3" "[]" "{}" 800 >$n 2>&1
}

playerctl() {
	# playerctl sometimes runs and hangs, so set a timeout then kill it
	command playerctl "$@" &
	{
		pid=$!
		sleep 1; kill $pid
	} >$n 2>&1 &
}

n=/dev/null

mute() {
	action="$1"
	# if a command isn't specified toggle mute
	[ ! "$1" ] && amixer -D pulse get Master | grep -qio off &&
		action=unmute || action=mute

	amixer -D pulse set Master "$action" >$n 2>&1
	notif="vol ${action}d"
}

mute_window() {
	set -e
	# binary name
	cmd=$(readlink "/proc/$(xdotool getactivewindow getwindowpid)/exe")
	cmd=${cmd##*/}

	# pulseaudio ID
	set -- $(pactl list sink-inputs | grep -iB28 "\.binary.*${cmd%%.*}" \
		| sed -n 's/^.*\(Mute: \|#\)//p')

	# more helpful notification, prevent windows having different states
	[ "$2" = yes ] && human=unmuted mute=0 || human=muted mute=1

	for id; do
		pactl set-sink-input-mute "${id###}" $mute && notify 451 "$human $cmd"
	done
	exit
}

volume() {
	# get the current volume
	amixer=$(amixer -D pulse get Master)
	current=${amixer##*[0-9] \[}
	current=${current%%%*}
	mute=${amixer##*\[}

	[ "$1" = get ] && {
		[ "$mute" != 'on]' ] && exec printf '%s\n' "$current [muted]"
		exec printf '%s\n' "$current"
	}

	# default modifier (5%)
	number=${2:-5}

	# calculate the new volume
	[ "$1" =  up  ] && number="$((current + number))"
	[ "$1" = down ] && number="$((current - number))"

	# handling of invalid numbers
	[ "$number" -lt  0  ] && number=0
	[ "$number" -gt 100 ] && number=100

	amixer -D pulse set Master "$number%" >$n 2>&1

	notif="vol set to $number"
}

media() {
	# force playerctl to use <x> player
	# format:
	# player="<x>"
	[ -f /tmp/player ] || touch /tmp/player
	. /tmp/player

	action="$1"

	# toggle play/pause
	[ "$1" = p ] && action=play-pause && act="toggled pause on"

	playerctl -p "$player" "$action"
	notif="$act $(playerctl -p "$player" metadata xesam:title)"
}

case $1 in
	# mute
	m) mute;;
	mute|unmute) mute $1;;

	# mute current window
	mw) mute_window;;

	# volume
	up|down) volume $1 $2;;
	get) volume get;;
	set)
		[ "$2" ] || { echo "option 'set' requires a number"; exit 1; }
		volume set "$2"
	;;

	# media
	p|pause|play|stop) media $1;;

	*)
		cat << EOF
muting
 mw      toggle mute on window
 m       toggle mute
 mute
 unmute

volume
 get     get current volume
 set     set volume to <number>
 up      increase volume by number (default: 5)
 down    decrease volume by number (default: 5)

media
 p       toggle pause
 pause
 play
 stop
EOF
		exit 1
esac

#notify 70 "$notif"
echo "$notif"
notvol "$notif"
