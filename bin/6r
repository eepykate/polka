#!/bin/sh
#  crappier xrandr wrapper

help() {
	cat << EOF

[34mrrrrrr[0m - crappier xrandr wrapper

usage:
 - 'dims    [-f] <mons>' get WHXY of monitors
 - 'focused [-f]'        print geometry of focused monitor, needs xdotool
 - 'names   [-p]'        show monitor names (-p = only primary)
 - 'primary [-f]'        print geometry of primary monitor

-f = formatted (example: 800x600+0+0)
otherwise, print like '800 600 0 0'

EOF
}

eq() {  # [ a = b ] with globbing
	case $1 in
		*$2*) ;;
		*) return 1
	esac
}

o() {
	xrandr --current | while read -r line; do
		eq "$line" "$@" && l=${line%% inv*} l=${l%% lef*} l=${l%% rig*} && printf '%s\n' "$l"
	done
}

# print the first word
word() {
	while IFS='' read -r l; do
		echo "${l%% *}"
	done
}

d() {
	[ "$1" = -f ] && f=nonzero && shift
	[ "$1" ] || set -- $(n)
	IFS='x+('
	for i; do
		var=$(o "$i")
		var=${var##*primary }
		set -- ${var##*connected }
		[ "$f" ] && printf '%s\n' "$1x$2+$3+$4" || printf '%s\n' "$1 $2 $3 $4"
	done
}

f() {
	[ "$1" = -f ] && format=-f
	# get the dimensions of the focused monitor
	eval "$(xdotool getwindowfocus getwindowgeometry --shell)"
	# get the maximum size of all the combined monitors
	max=$(o " current")
	max=${max##*ent }
	set -- ${max%%,*} 0 0
	# check if the focused window takes up the full size of all
	# monitors (most likely the root window), then print the primary monitor
	[ "$WIDTH" = "$1" ] && [ "$HEIGHT" = "$3" ] &&
		{ p $format; exit; }
	o " connected" | while read -r line; do
		IFS='x+('
		set -- ${line}
		# remove junk added by the custom IFS
		set -- "${1##* }" "$2" "$3" "$4"
		#echo "1: $2\n2: $2\n3: $3\n4: $4\n*: $*"
		# Width
		[ "$X" -ge "$3" ] && [ "$X" -lt "$(($3+$1))" ] || continue
		# Height
		[ "$Y" -ge "$4" ] && [ "$Y" -lt "$(($4+$2))" ] || continue
		[ "$format" = -f ] && printf '%s\n' "$1x$2+$3+$4" ||
			printf '%s\n' "$1 $2 $3 $4"
		exit
	done
}

n() {
	case $1 in
		-p) o " primary"  | word;;
		*) o " connected" | word;;
	esac
}

p() {
	var=$(o primary)
	var=${var##*primary }
	[ "$1" = -f ] && printf '%s\n' "${var%% (*}" || {
		IFS='x+'
		set -- ${var%% (*}
		echo "$@"
	}
}

_() {
	v=$1; shift
	case $v in
		d*|f*|n*|p*) ${v%${v#?}} "$@"; exit $?;;
	esac
}

_ "${0##*/}" "$@"
_ "${@:-}"

help
